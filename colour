#!/usr/bin/python
__author__ = 'warmans'

import xml.etree.ElementTree as ET
import argparse
import sys
import re


class Formatter():

    def __init__(self, config_path):
        self.config_path = config_path

    def get_style(self, attributes):

        fg_name = attributes['colour'] if 'colour' in attributes.keys() else 'default'
        bg_name = attributes['background'] if 'background' in attributes.keys() else 'default'
        set_name = attributes['style'] if 'style' in attributes.keys() else 'normal'

        background = {
            'black': '40',
            'red': '41',
            'green': '42',
            'yellow': '43',
            'blue': '44',
            'magenta': '45',
            'cyan': '46',
            'white': '47',
            'default': '49'
        }
        foreground = {
            'black': '30',
            'red': '31',
            'green': '32',
            'yellow': '33',
            'blue': '34',
            'magenta': '35',
            'cyan': '36',
            'white': '37',
            'default': '39',
        }
        sets = {
            'normal': '0',
            'bold': '1',
            'dim': '2',
            'underline': '4',
            'blink': '5'
        }

        fg_colour = foreground[fg_name] if (fg_name in foreground.keys()) else foreground['default']
        bg_colour = background[bg_name] if (bg_name in background.keys()) else background['default']
        set = sets[set_name] if (set_name in sets.keys()) else sets['normal']

        return '\033['+set+';'+fg_colour+';'+bg_colour+'m{0}\033[0m'

    #parse output
    def format(self, input_stream):

        #read config
        config = ET.parse(self.config_path)

        #parse input stream using config
        for line in input_stream:
            for line_style in config.getroot():

                formatted_line = ''
                matches = re.match(line_style.attrib['match'], line)
                outer_style = self.get_style(line_style.attrib) if ('colour' in line_style.attrib.keys()) else '{0}'

                if matches:
                    #if no sub-strings are defined output the whole line
                    if len(list(line_style)) > 0:
                        for part in line_style:
                            match = int(part.text)
                            formatted_line = formatted_line + self.get_style(part.attrib).format(matches.group(match))
                    else:
                        formatted_line = line.strip()

                    print outer_style.format(formatted_line)


if __name__ == '__main__':

    #handle args
    parser = argparse.ArgumentParser()
    parser.add_argument("input", default=None, nargs='?')
    parser.add_argument("-c", "--cfg", nargs='?')
    args = parser.parse_args()

    #create formatter
    formatter = Formatter(args.cfg)

    # pipe
    if not sys.stdin.isatty():
        formatter.format(sys.stdin)

    # file
    else:
        input_filename = args.input

        if not input_filename:
            raise Exception('No pipe or file specified')

        with open(input_filename, 'rU') as input_stream:
            formatter.format(input_stream)
